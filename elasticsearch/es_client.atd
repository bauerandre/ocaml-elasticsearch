(*
   Types used by the elasticsearch API
   (not complete)
*)

type json <ocaml module="Es_untyped_json"> = abstract
  (* Untyped JSON, for when things are untypable *)


(*** Index creation ****)

type index_settings = {
  ?number_of_shards : int option;
  ?number_of_replicas : int option;
}

type create_index_request = {
  ?settings : index_settings option;
  ~mappings : (string * json) list <json repr="object">;
}

(***
   Search queries

   Read more about querying:
   http://www.elasticsearch.org/guide/reference/query-dsl/

   The 'item type variable stands for the type of objects we want to index.
***)

type order = [ Asc <json name="asc"> | Desc <json name="desc"> ]

type sort_order = {
  order : order;
  (* Sorting order *)

  ?ignore_unmapped : bool option;
  (*
     By default, the search request will fail if there is no mapping
     associated with a field.
     The ignore_unmapped option allows to ignore fields that have
     no mapping and not sort by them.
  *)
}

type query_request = {
  query : json
    (* mostly untypable;
       ad-hoc JSON is generated by module Es_query. *);

  ~from : int;
    (* return results starting from this offset *)

  size : int;
    (* return up to that many results *)

  ?sort : (string * sort_order) list <json repr="object"> list option;
    (* allows to add one or more sort on specific field with order *)

  track_scores : bool;
    (* when sorting on a field, scores are not computed.
       By setting track_scores to true, scores will still
       be computed and tracked. *)
}

(*** Search results ***)

type shards = {
  total: int;
  successful : int;
  failed : int
} <ocaml field_prefix="sd_">

type 'item hit = {
  _id : string;
  _index : string;
  _type : string;
  _score : float;
  _source : 'item;
} <ocaml field_prefix="ht">

type 'hit hits = {
  total : int;
  ?max_score : float option;
  ~hits : 'hit list
} <ocaml field_prefix="hts_">

type 'hit search_result = {
  ?took : int option;
  ~timed_out : bool;
  ?_shards <ocaml name="sr_shards"> : shards option;
  ?hits : 'hit hits option;
  ?error : string option;
  ~count : int;
} <ocaml field_prefix="sr_">


(*** Retrieving documents of known ID (get, mget) ***)

type get_request_key = {
  id <json name ="_id"> : string;
  ?routing <json name="_routing"> : string option;
} <ocaml field_prefix="grq_">

type get_request = {
  docs : get_request_key list;
} <ocaml field_prefix="grq_">

type 'item get_results = {
  ~docs : 'item get_result list;
  ?error : string option;
} <ocaml field_prefix="grs_">

type 'item get_result = {
  _index : string;
  ?_type : string option;
  _id : string;
  found : bool;
  ?_version : int option;
  ?_source <ocaml name="gr_source"> : 'item option;
} <ocaml field_prefix="gr_">

type 'item update_request = {
  _doc : 'item
} <ocaml field_prefix="ur">

(*** Generic response type ***)

type generic_result = {
  ?_id : string option;
  ?_index : string option;
  ?_type : string option;
  ?_version : int option;
  ?found : bool option;
  ?ok : bool option;
  ?error : string option;
  ?status : int option;
}


(*** Error printing ***)

type http_resp_record = {
  status : int;
  headers : (string * string) list <json repr="object">;
  body : string;
} <ocaml field_prefix="hr_">
