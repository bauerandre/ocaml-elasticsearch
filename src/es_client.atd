(**
   Types used by the elasticsearch API
   (not complete)
*)

type json <ocaml module="Es_untyped_json"> = abstract
  (** Untyped JSON, for when things are untypable *)

type simplified_result = {
  ?error : string option;
  ?status : int option;
}
  (** A typical response contains these two fields if something went wrong,
      or request-specific fields otherwise.
      We can use this type when we don't care about the response
      other than whether the request was successful. *)


(** Index creation *)

type index_settings = {
  ?number_of_shards : int option;
  ?number_of_replicas : int option;
}

type create_index_request = {
  ?settings : index_settings option;
  ~mappings : (string * json) list <json repr="object">;
}

(**
   Search queries and responses

   Read more about querying:
   http://www.elasticsearch.org/guide/reference/query-dsl/

   The 'item type variable stands for the type of objects we want to index.
*)

type order = [ Asc <json name="asc"> | Desc <json name="desc"> ]

type sort_order = {
  order : order;
  (** Sorting order *)

  ?ignore_unmapped : bool option;
  (**
    By default, the search request will fail if there is no mapping associated with a field.
    The ignore_unmapped option allows to ignore fields that have no mapping and not sort by them.
  *)
}

type query_request = {
  query : json
    (** mostly untypable;
        ad-hoc JSON is generated by module Es_query. *);

  ~from : int;
    (** return results starting from this offset *)

  size : int;
    (** return up to that many results *)

  ?sort : (string * sort_order) list <json repr="object"> list option;
    (** allows to add one or more sort on specific field with order *)

  track_scores : bool;
    (** when sorting on a field, scores are not computed.
        By setting track_scores to true, scores will still
        be computed and tracked. *)
}

type 'hit search_result = {
  ?took <ocaml name="sr_took"> : int option;
  ?timed_out <ocaml name="sr_timed_out"> : bool option;
  ?sr_shards <json name="_shards"> : shards option;
  ?hits <ocaml name="sr_hits"> : 'hit hits option;
  ?error <ocaml name="sr_error"> : string option;
  ?status <ocaml name="sr_status"> : int option;
  ?count <ocaml name="sr_count"> : int option;
}

type 'item get_result = {
  ?gr_id <json name="_id"> : string option;
  ?gr_index <json name="_index"> : string option;
  ?gr_type <json name="_type"> : string option;
  ?gr_version <json name="_version"> : int option;
  ?exists <ocaml name="gr_exists"> : bool option;
  ?gr_item <json name="_source"> : 'item option;
  ?error <ocaml name="gr_error"> : string option;
  ?status <ocaml name="gr_status"> : int option
}

type get_request_key = {
  id <json name ="_id"> : string;
  ?routing <json name="_routing"> : string option;
} <ocaml field_prefix="grq_">

type get_request = {
  docs : get_request_key list;
} <ocaml field_prefix="grq_">

type 'item get_results = {
  ?docs : 'item get_result list option;
  ?error : string option;
  ?status : int option
} <ocaml field_prefix="grs_">

type delete_result = {
  ?dr_id <json name="_id"> : string option;
  ?dr_index <json name="_index"> : string option;
  ?dr_type <json name="_type"> : string option;
  ?dr_version <json name="_version"> : int option;
  ?found <ocaml name="dr_found"> : bool option;
  ?ok <ocaml name="dr_ok"> : bool option;
  ?error <ocaml name="dr_error"> : string option;
  ?status <ocaml name="dr_status"> : int option
}

type index_result = {
  ?ir_id <json name="_id"> : string option;
  ?ir_index <json name="_index"> : string option;
  ?ir_type <json name="_type"> : string option;
  ?ir_version <json name="_version"> : int option;
  ?ok <ocaml name="ir_ok"> : bool option;
  ?error <ocaml name="ir_error"> : string option;
  ?status <ocaml name="ir_status"> : int option
}

type 'item update_request = {
  doc <ocaml name="ur_doc"> : 'item
}

type update_result = {
  ?ur_id <json name="_id"> : string option;
  ?ur_index <json name="_index"> : string option;
  ?ur_type <json name="_type"> : string option;
  ?ur_version <json name="_version"> : int option;
  ?ok <ocaml name="ur_ok"> : bool option;
  ?error <ocaml name="ur_error"> : string option;
  ?status <ocaml name="ur_status"> : int option
}

type shards = {
  total: int;
  successful : int;
  failed : int
} <ocaml field_prefix="sd_">

type 'hit hits = {
  total : int;
  ?max_score : float option;
  ~hits : 'hit list
} <ocaml field_prefix="hts_">

type 'item hit = {
  ht_id <json name="_id"> : string;
  ht_index <json name="_index"> : string;
  ht_type <json name="_type"> : string;
  ht_score <json name="_score"> : float;
  ht_item <json name="_source"> : 'item
}
